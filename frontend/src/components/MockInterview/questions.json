[
    {"question": "What is the difference between null and undefined?", "answer": "Null is a value representing no value; undefined means a variable has been declared but not assigned.", "category": "Technical"},
    {"question": "Explain closures in JavaScript.", "answer": "A closure is a function that retains access to its lexical scope even when executed outside that scope.", "category": "Technical"},
    {"question": "What is the event loop?", "answer": "The event loop processes code, collects events, and executes them in the order they are queued.", "category": "Technical"},
    {"question": "What are the four pillars of OOP?", "answer": "Encapsulation, inheritance, abstraction, and polymorphism.", "category": "Technical"},
    {"question": "How would you handle multiple tasks with conflicting deadlines?", "answer": "I would prioritize tasks, break them down into manageable parts, and communicate expectations clearly.", "category": "Behavioral"},
    {"question": "Tell me about a time when you had to manage a difficult project.", "answer": "I focused on clear communication, breaking down tasks, and delegating responsibilities effectively.", "category": "Behavioral"},
    {"question": "What is a promise in JavaScript?", "answer": "A promise represents the completion (or failure) of an asynchronous operation and its resulting value.", "category": "Technical"},
    {"question": "What is the difference between `==` and `===` in JavaScript?", "answer": "`==` compares values after type coercion, while `===` compares both value and type.", "category": "Technical"},
    {"question": "How does prototypal inheritance work in JavaScript?", "answer": "Objects can inherit properties and methods from other objects, allowing for shared behavior.", "category": "Technical"},
    {"question": "Describe a situation where you had to work with a difficult colleague.", "answer": "I communicated openly to understand their perspective and work collaboratively towards a solution.", "category": "Behavioral"},
    {"question": "What is an API?", "answer": "An API (Application Programming Interface) is a set of protocols for building and interacting with software applications.", "category": "Technical"},
    {"question": "Can you explain the concept of asynchronous programming?", "answer": "Asynchronous programming allows tasks to be executed in parallel without blocking the main thread.", "category": "Technical"},
    {"question": "How would you improve a team's productivity?", "answer": "I would encourage clear communication, effective time management, and foster collaboration and feedback.", "category": "Behavioral"},
    {"question": "What are the differences between `var`, `let`, and `const`?", "answer": "`var` is function-scoped, while `let` and `const` are block-scoped. `const` cannot be reassigned.", "category": "Technical"},
    {"question": "How do you approach debugging a problem?", "answer": "I break down the problem, test different scenarios, and use debugging tools to trace the issue.", "category": "Behavioral"},
    {"question": "What is the role of a service worker in a PWA?", "answer": "A service worker is a script that runs in the background and enables features like caching and offline functionality.", "category": "Technical"},
    {"question": "What are RESTful APIs?", "answer": "RESTful APIs are architectural styles for web services that use HTTP requests to perform CRUD operations on resources.", "category": "Technical"},
    {"question": "Tell me about a challenging deadline you've faced.", "answer": "I focused on task prioritization, managing expectations, and collaborating with my team to meet the deadline.", "category": "Behavioral"},
    {"question": "How would you optimize a slow-performing website?", "answer": "I would optimize images, minimize HTTP requests, use caching, and leverage lazy loading techniques.", "category": "Technical"},
    {"question": "How do you handle constructive criticism?", "answer": "I listen carefully, reflect on the feedback, and take actionable steps to improve.", "category": "Behavioral"},
    {"question": "What is the purpose of `this` in JavaScript?", "answer": "`this` refers to the context in which a function is called, typically the object the function is a method of.", "category": "Technical"},
    {"question": "What is the difference between a stack and a queue?", "answer": "A stack is LIFO (Last In, First Out) while a queue is FIFO (First In, First Out).", "category": "Technical"},
    {"question": "How do you stay up-to-date with new technologies?", "answer": "I read articles, attend webinars, and follow tech communities to stay informed about trends and tools.", "category": "Behavioral"},
    {"question": "What is a higher-order function in JavaScript?", "answer": "A higher-order function is a function that takes another function as an argument or returns a function as a result.", "category": "Technical"},
    {"question": "Describe a time when you had to adapt to a change at work.", "answer": "I stayed flexible, focused on the positives, and quickly learned new tools and processes to adapt.", "category": "Behavioral"},
    {"question": "What is the DOM in JavaScript?", "answer": "The DOM (Document Object Model) is an interface that represents the structure of an HTML document, allowing scripts to modify it.", "category": "Technical"},
    {"question": "How do you ensure that your code is scalable?", "answer": "I follow best practices, write modular and reusable code, and focus on performance and maintainability.", "category": "Technical"},
    {"question": "How do you handle tight deadlines?", "answer": "I prioritize tasks, communicate clearly with my team, and focus on delivering quality results within the time frame.", "category": "Behavioral"},
    {"question": "What is the difference between a class and a constructor in JavaScript?", "answer": "A class is a blueprint for creating objects, while a constructor initializes those objects.", "category": "Technical"},
    {"question": "What are webhooks?", "answer": "Webhooks are HTTP callbacks that allow one system to send real-time data to another system when an event occurs.", "category": "Technical"},
    {"question": "What are the advantages of using TypeScript over JavaScript?", "answer": "TypeScript provides static typing, better tooling, and more reliable code by catching errors early during development.", "category": "Technical"},
    {"question": "How do you handle stress in a work environment?", "answer": "I manage stress by staying organized, breaking tasks into smaller steps, and taking breaks when needed.", "category": "Behavioral"},
    {"question": "What is the difference between deep copy and shallow copy?", "answer": "A shallow copy only copies the top-level elements, while a deep copy clones all nested objects as well.", "category": "Technical"},
    {"question": "How would you handle a disagreement with a colleague?", "answer": "I would approach the situation calmly, listen to their point of view, and work together to find a common solution.", "category": "Behavioral"},
    {"question": "What is a closure in JavaScript?", "answer": "A closure is a function that has access to its outer functionâ€™s variables even after the outer function has finished executing.", "category": "Technical"},
    {"question": "How would you test your code for performance?", "answer": "I would use profiling tools, write performance tests, and monitor the application's behavior under load.", "category": "Technical"},
    {"question": "What is the difference between `undefined` and `NaN`?", "answer": "`undefined` means a variable is declared but not assigned, while `NaN` is a result of an invalid mathematical operation.", "category": "Technical"},
    {"question": "Tell me about a time you worked under pressure.", "answer": "I stayed focused, organized, and completed tasks efficiently while maintaining quality.", "category": "Behavioral"},
    {"question": "What is functional programming?", "answer": "Functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state changes.", "category": "Technical"},
    {"question": "What is a RESTful API?", "answer": "A RESTful API is an architectural style for creating networked applications, using HTTP methods to interact with resources.", "category": "Technical"},
    {"question": "How do you handle scope in JavaScript?", "answer": "I ensure that variables are declared in the correct scope to avoid issues with variable access.", "category": "Technical"},
    {"question": "What is a callback function?", "answer": "A callback function is a function that is passed as an argument to another function and executed after the completion of the first function.", "category": "Technical"},
    {"question": "How do you handle unexpected changes in project requirements?", "answer": "I stay flexible, reassess priorities, and work with the team to adjust the plan accordingly.", "category": "Behavioral"},
    {"question": "Explain the concept of memoization.", "answer": "Memoization is an optimization technique where results of expensive function calls are cached to avoid repeated calculations.", "category": "Technical"},
    {"question": "What is a Content Delivery Network (CDN)?", "answer": "A CDN is a network of distributed servers that delivers content based on the geographic location of the user to improve load times.", "category": "Technical"},
    {"question": "How do you ensure a good user experience in your web applications?", "answer": "I focus on usability, fast load times, accessibility, and intuitive design.", "category": "Technical"},
    {"question": "What is the difference between synchronous and asynchronous code?", "answer": "Synchronous code executes line by line, while asynchronous code allows other tasks to run while waiting for a process to complete.", "category": "Technical"},
    {"question": "Tell me about a time you made a mistake and how you handled it.", "answer": "I admitted my mistake, learned from it, and took steps to ensure it didnâ€™t happen again.", "category": "Behavioral"},
    {"question": "How would you explain JavaScript to a non-technical person?", "answer": "I would say JavaScript is a programming language used to make web pages interactive and dynamic.", "category": "Technical"},
    {"question": "What is event delegation in JavaScript?", "answer": "Event delegation is a technique where a single event listener is attached to a parent element instead of multiple listeners on child elements.", "category": "Technical"},
    {"question": "What motivates you in your work?", "answer": "I am motivated by challenges, problem-solving, and the opportunity to learn new technologies.", "category": "Behavioral"},
    {"question": "How do you handle tight deadlines and competing priorities?", "answer": "I prioritize tasks, stay focused, and communicate effectively to ensure everything is completed on time.", "category": "Behavioral"},
    {"question": "What is the difference between ES5 and ES6?", "answer": "ES6 introduced new features like let/const, arrow functions, template literals, and promises, making JavaScript more concise and powerful.", "category": "Technical"},
    {"question": "What is a promise chain?", "answer": "A promise chain is a sequence of promises where each subsequent promise is executed after the previous one has resolved.", "category": "Technical"},
    {"question": "What is the `bind()` method in JavaScript?", "answer": "The `bind()` method creates a new function that, when called, has its `this` keyword set to the provided value.", "category": "Technical"},
    {"question": "How do you approach learning a new technology?", "answer": "I start with the basics, work through tutorials, and apply what Iâ€™ve learned in projects to deepen my understanding.", "category": "Behavioral"}
  ]
  