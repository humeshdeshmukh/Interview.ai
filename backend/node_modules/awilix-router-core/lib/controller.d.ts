import { MiddlewareParameter, Constructor, IRouterConfigState, ClassOrFunctionReturning } from './state-util';
import { HttpVerb } from './http-verbs';
import { STATE, IS_CONTROLLER_BUILDER } from './symbols';
/**
 * Method builder options.
 */
export interface IMethodBuilderOpts {
    before?: MiddlewareParameter;
    after?: MiddlewareParameter;
}
/**
 * Verb builder function.
 */
export declare type VerbBuilderFunction<T = any> = (path: string, method: keyof T, opts?: IMethodBuilderOpts) => IAwilixControllerBuilder<T>;
/**
 * Fluid router builder.
 */
export interface IAwilixControllerBuilder<T = any> {
    [STATE]: IRouterConfigState;
    [IS_CONTROLLER_BUILDER]: boolean;
    target: Constructor | Function;
    get: VerbBuilderFunction<T>;
    post: VerbBuilderFunction<T>;
    put: VerbBuilderFunction<T>;
    patch: VerbBuilderFunction<T>;
    delete: VerbBuilderFunction<T>;
    head: VerbBuilderFunction<T>;
    options: VerbBuilderFunction<T>;
    connect: VerbBuilderFunction<T>;
    all: VerbBuilderFunction<T>;
    verbs(verbs: Array<HttpVerb>, path: string, method: keyof T, opts?: IMethodBuilderOpts): this;
    prefix(path: string): this;
    before(value: MiddlewareParameter): this;
    after(value: MiddlewareParameter): this;
}
/**
 * Configures routing config for a class or function to be invoked by a router.
 *
 * @example
 *   const api = ({ todoService }) => ({
 *     find: (ctx) => { ... }
 *   })
 *
 *   export default createController(api)
 *     .prefix('/todos')
 *     .before(bodyParser())
 *     .get('/', 'find')
 *     .get('/:id', 'get')
 *     .post('/:id', 'create', {
 *       before: [authenticate()],
 *     })
 *     .patch('/:id', 'update', {
 *       before: [authenticate()]
 *     })
 */
export declare function createController<T = any>(ClassOrFunction: ClassOrFunctionReturning<T>): IAwilixControllerBuilder<T>;
/**
 * Creates a builder from existing state.
 * This is used internally, but exported for convenience.
 *
 * @param ClassOrFunction The target to invoke.
 * @param state Existing state to continue building on.
 */
export declare function createControllerFromState(ClassOrFunction: Constructor | Function, state: IRouterConfigState): IAwilixControllerBuilder<any>;
