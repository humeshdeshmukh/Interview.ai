"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_verbs_1 = require("./http-verbs");
var invariant_1 = require("./invariant");
var state_util_1 = require("./state-util");
/**
 * Registers a path for this class method.
 * You can add more than one.
 *
 * @param path
 */
function route(path) {
    return function routerDecorator(target, name, descriptor) {
        if (name === void 0) { name = null; }
        state_util_1.updateState(target, function (state) { return state_util_1.addRoute(state, name, path); });
    };
}
exports.route = route;
/**
 * Adds one or more middleware before the method middleware.
 * Can be applied to classes and methods. Class-level `before` middleware
 * runs before method-level ones.
 *
 * @param middleware
 */
function before(middleware) {
    return function routerDecorator(target, name, descriptor) {
        if (name === void 0) { name = null; }
        state_util_1.updateState(target, function (state) { return state_util_1.addBeforeMiddleware(state, name, middleware); });
    };
}
exports.before = before;
/**
 * Adds one or more middleware after the method middleware.
 * Can be applied to classes and methods. Class-level `after` middleware
 * runs after method-level ones.
 *
 * @param middleware
 */
function after(middleware) {
    return function routerDecorator(target, name, descriptor) {
        if (name === void 0) { name = null; }
        state_util_1.updateState(target, function (state) { return state_util_1.addAfterMiddleware(state, name, middleware); });
    };
}
exports.after = after;
/**
 * Assigns one or more HTTP verbs to class method.
 *
 * @param httpVerbs
 */
function verbs(httpVerbs) {
    return function verbsDecorator(target, name) {
        if (name === void 0) { name = null; }
        invariant_1.invariant(name, 'The "verbs" decorator can only be used on class verbs.');
        state_util_1.updateState(target, function (state) { return state_util_1.addHttpVerbs(state, name, httpVerbs); });
    };
}
exports.verbs = verbs;
/**
 * The same as `verbs([HttpVerbs.GET])`
 */
exports.GET = function () { return verbs([http_verbs_1.HttpVerbs.GET]); };
/**
 * The same as `verbs([HttpVerbs.HEAD])`
 */
exports.HEAD = function () { return verbs([http_verbs_1.HttpVerbs.HEAD]); };
/**
 * The same as `verbs([HttpVerbs.POST])`
 */
exports.POST = function () { return verbs([http_verbs_1.HttpVerbs.POST]); };
/**
 * The same as `verbs([HttpVerbs.PUT])`
 */
exports.PUT = function () { return verbs([http_verbs_1.HttpVerbs.PUT]); };
/**
 * The same as `verbs([HttpVerbs.DELETE])`
 */
exports.DELETE = function () { return verbs([http_verbs_1.HttpVerbs.DELETE]); };
/**
 * The same as `verbs([HttpVerbs.CONNECT])`
 */
exports.CONNECT = function () { return verbs([http_verbs_1.HttpVerbs.CONNECT]); };
/**
 * The same as `verbs([HttpVerbs.OPTIONS])`
 */
exports.OPTIONS = function () { return verbs([http_verbs_1.HttpVerbs.OPTIONS]); };
/**
 * The same as `verbs([HttpVerbs.PATCH])`
 */
exports.PATCH = function () { return verbs([http_verbs_1.HttpVerbs.PATCH]); };
/**
 * The same as `verbs([HttpVerbs.ALL])`
 */
exports.ALL = function () { return verbs([http_verbs_1.HttpVerbs.ALL]); };
//# sourceMappingURL=decorators.js.map